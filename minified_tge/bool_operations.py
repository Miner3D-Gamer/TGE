def and_three(a,b,c):'\n    Returns the logical AND of three boolean values.\n\n    Given three boolean inputs, `a`, `b`, and `c`, this function calculates\n    their logical AND result and returns the output.\n\n    # ┌─────┬─────┬─────┬─────┐\n    # │  a  │  b  │  c  │ out │\n    # ├─────┼─────┼─────┼─────┤\n    # │  0  │  0  │  0  │  0  │\n    # │  0  │  0  │  1  │  0  │\n    # │  0  │  1  │  0  │  0  │\n    # │  0  │  1  │  1  │  0  │\n    # │  1  │  0  │  0  │  0  │\n    # │  1  │  0  │  1  │  0  │\n    # │  1  │  1  │  0  │  0  │\n    # │  1  │  1  │  1  │  1  │\n    # └─────┴─────┴─────┴─────┘\n    ';return a and b and c
def and_four(a,b,c,d):'\n    Perform a logical AND operation on four boolean values.\n\n    This function takes four boolean inputs (a, b, c, d) and returns a boolean\n    value that represents the result of applying the logical AND operation on\n    all four inputs. The logical AND operation returns True if and only if all\n    the input values are True, otherwise, it returns False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n        d (bool): The fourth boolean input.\n\n    Returns:\n        bool: The result of the logical AND operation on all four inputs.\n    \n    # ┌─────┬─────┬─────┬─────┬─────┐\n    # │  a  │  b  │  c  │  d  │ out │\n    # ├─────┼─────┼─────┼─────┼─────┤\n    # │  0  │  0  │  0  │  0  │  0  │\n    # │  0  │  0  │  0  │  1  │  0  │\n    # │  0  │  0  │  1  │  0  │  0  │\n    # │  0  │  0  │  1  │  1  │  0  │\n    # │  0  │  1  │  0  │  0  │  0  │\n    # │  0  │  1  │  0  │  1  │  0  │\n    # │  0  │  1  │  1  │  0  │  0  │\n    # │  0  │  1  │  1  │  1  │  0  │\n    # │  1  │  0  │  0  │  0  │  0  │\n    # │  1  │  0  │  0  │  1  │  0  │\n    # │  1  │  0  │  1  │  0  │  0  │\n    # │  1  │  0  │  1  │  1  │  0  │\n    # │  1  │  1  │  0  │  0  │  0  │\n    # │  1  │  1  │  0  │  1  │  0  │\n    # │  1  │  1  │  1  │  0  │  0  │\n    # │  1  │  1  │  1  │  1  │  1  │\n    # └─────┴─────┴─────┴─────┴─────┘\n    ';return a and b and c and d
def and_five(a,b,c,d,e):'\n    Perform a logical AND operation on five boolean values.\n\n    This function takes five boolean values as input and returns the result of applying\n    a logical AND operation to all five values. The logical AND operation returns True\n    only if all input values are True, otherwise, it returns False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n        d (bool): The fourth boolean input.\n        e (bool): The fifth boolean input.\n\n    Returns:\n        bool: The result of the logical AND operation on all five input values.\n\n    \n    ┌─────┬─────┬─────┬─────┬─────┬─────┐\n    │  a  │  b  │  c  │  d  │  e  │ out │\n    ├─────┼─────┼─────┼─────┼─────┼─────┤\n    │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │\n    └─────┴─────┴─────┴─────┴─────┴─────┘\n    ';return a and b and c and d and e
def and_six(a,b,c,d,e,f):'\n    Perform a logical AND operation on six boolean values.\n\n    This function takes six boolean values as input and returns the result of their logical AND operation.\n    The logical AND operation returns True if and only if all input boolean values are True. Otherwise, it\n    returns False.\n\n    Args:\n        a (bool): The first boolean value.\n        b (bool): The second boolean value.\n        c (bool): The third boolean value.\n        d (bool): The fourth boolean value.\n        e (bool): The fifth boolean value.\n        f (bool): The sixth boolean value.\n\n    Returns:\n        bool: The result of the logical AND operation on the input boolean values.\n\n    ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n    │  a  │  b  │  c  │  d  │  e  │  f  │ out │\n    ├─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n    │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  1  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  1  │\n    └─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n    ';return a and b and c and d and e and f
def and_seven(a,b,c,d,e,f,g):'\n    Perform a logical AND operation on seven boolean values.\n\n    This function takes seven boolean values as input and returns the result\n    of applying a logical AND operation on all the input values.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n        d (bool): The fourth boolean input.\n        e (bool): The fifth boolean input.\n        f (bool): The sixth boolean input.\n        g (bool): The seventh boolean input.\n\n    Returns:\n        bool: The result of applying a logical AND operation on all seven input values.\n\n    ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n    │  a  │  b  │  c  │  d  │  e  │  f  │  g  │ out │\n    ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n    │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │\n    └─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n    ';return a and b and c and d and e and f and g
def and_eight(a,b,c,d,e,f,g,h):'\n    Performs a logical AND operation on eight boolean values.\n\n    This function takes eight boolean input values (a, b, c, d, e, f, g, h) and returns\n    the result of performing a logical AND operation on all of them. The logical AND\n    operation returns True only if all input values are True; otherwise, it returns False.\n\n    Args:\n        a (bool): The first boolean input value.\n        b (bool): The second boolean input value.\n        c (bool): The third boolean input value.\n        d (bool): The fourth boolean input value.\n        e (bool): The fifth boolean input value.\n        f (bool): The sixth boolean input value.\n        g (bool): The seventh boolean input value.\n        h (bool): The eighth boolean input value.\n\n    Returns:\n        bool: The result of performing a logical AND operation on all eight input values.\n\n    Example:\n        >>> and_eight(True, True, False, True, True, True, False, True)\n        False\n\n    ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n    │  a  │  b  │  c  │  d  │  e  │  f  │  g  │  h  │ out │\n    ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n    │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │\n    └─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n    ';return a and b and c and d and e and f and g and h
def and_nine(a,b,c,d,e,f,g,h,i):"\n    Perform a logical 'AND' operation on nine input boolean values.\n\n    This function takes nine boolean values as input and performs a logical 'AND' operation\n    on them, returning a single boolean result. The 'AND' operation returns True if and only\n    if all input boolean values are True, otherwise, it returns False.\n\n    Args:\n        a (bool): The first boolean value.\n        b (bool): The second boolean value.\n        c (bool): The third boolean value.\n        d (bool): The fourth boolean value.\n        e (bool): The fifth boolean value.\n        f (bool): The sixth boolean value.\n        g (bool): The seventh boolean value.\n        h (bool): The eighth boolean value.\n        i (bool): The ninth boolean value.\n\n    Returns:\n        bool: The result of the logical 'AND' operation on all nine input boolean values.\n\n    ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┐\n    │  a  │  b  │  c  │  d  │  e  │  f  │  g  │  h  │  i  │ out │\n    ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┼─────┤\n    │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  1  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  0  │  0  │\n    │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │  1  │\n    └─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┴─────┘\n    ";return a and b and c and d and e and f and g and h and i
def and_ten(a,b,c,d,e,f,g,h,i,j):'\n    Perform a logical AND operation on ten boolean values.\n\n    This function takes ten boolean values as input and returns the result of\n    performing a logical AND operation on all the input values. The logical AND\n    operation returns True if and only if all input values are True, otherwise\n    it returns False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n        d (bool): The fourth boolean input.\n        e (bool): The fifth boolean input.\n        f (bool): The sixth boolean input.\n        g (bool): The seventh boolean input.\n        h (bool): The eighth boolean input.\n        i (bool): The ninth boolean input.\n        j (bool): The tenth boolean input.\n\n    Returns:\n        bool: The result of the logical AND operation on all input boolean values.\n    ';return a and b and c and d and e and f and g and h and i and j
def or_three(a,b,c):'\n    Computes the logical OR operation on three boolean values.\n\n    This function takes three boolean inputs, `a`, `b`, and `c`, and returns\n    the result of applying the logical OR operation between them. The logical\n    OR operation returns True if at least one of the input values is True,\n    otherwise, it returns False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n\n    Returns:\n        bool: The result of the logical OR operation on `a`, `b`, and `c`.\n    ';return a or b or c
def or_four(a,b,c,d):'\n    Perform a logical OR operation on four boolean values.\n\n    This function takes four boolean values as input and returns the result\n    of performing a logical OR operation on them. The logical OR operation\n    returns True if at least one of the input boolean values is True, and\n    False if all the input boolean values are False.\n\n    Args:\n        a (bool): The first boolean value.\n        b (bool): The second boolean value.\n        c (bool): The third boolean value.\n        d (bool): The fourth boolean value.\n\n    Returns:\n        bool: The result of the logical OR operation on the input values.\n    ';return a or b or c or d
def or_five(a,b,c,d,e):'\n    Perform a logical OR operation on five boolean values.\n\n    This function takes five boolean values as input and applies the logical OR operation\n    to them, returning a single boolean result. The logical OR operation returns True\n    if at least one of the input boolean values is True, otherwise it returns False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n        d (bool): The fourth boolean input.\n        e (bool): The fifth boolean input.\n\n    Returns:\n        bool: The result of applying the logical OR operation on the input values.\n    ';return a or b or c or d or e
def or_six(a,b,c,d,e,f):'\n    Perform a logical OR operation on six input boolean values.\n\n    This function takes six boolean values as input and computes their logical\n    OR operation, returning a single boolean result. The logical OR operation\n    returns True if at least one of the input values is True, and False if all\n    input values are False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n        d (bool): The fourth boolean input.\n        e (bool): The fifth boolean input.\n        f (bool): The sixth boolean input.\n\n    Returns:\n        bool: The result of the logical OR operation on the input boolean values.\n    ';return a or b or c or d or e or f
def or_seven(a,b,c,d,e,f,g):'\n    Compute the logical OR operation on seven boolean values.\n\n    This function takes seven boolean values as input and returns the result\n    of performing the logical OR operation on all of them. It returns True\n    if at least one of the input values is True, otherwise it returns False.\n\n    Args:\n        a (bool): The first boolean value.\n        b (bool): The second boolean value.\n        c (bool): The third boolean value.\n        d (bool): The fourth boolean value.\n        e (bool): The fifth boolean value.\n        f (bool): The sixth boolean value.\n        g (bool): The seventh boolean value.\n\n    Returns:\n        bool: The result of the logical OR operation on all input values.\n    ';return a or b or c or d or e or f or g
def or_eight(a,b,c,d,e,f,g,h):'\n    Compute the logical OR operation on a series of eight boolean values.\n\n    This function takes eight boolean values as input and performs a logical OR operation\n    on all of them. It returns True if at least one of the input boolean values is True,\n    otherwise, it returns False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n        d (bool): The fourth boolean input.\n        e (bool): The fifth boolean input.\n        f (bool): The sixth boolean input.\n        g (bool): The seventh boolean input.\n        h (bool): The eighth boolean input.\n\n    Returns:\n        bool: True if at least one of the input booleans is True, False otherwise.\n    ';return a or b or c or d or e or f or g or h
def or_nine(a,b,c,d,e,f,g,h,i):'\n    Perform a logical OR operation on nine boolean values.\n\n    This function takes nine boolean values as input and returns the result\n    of performing a logical OR operation on all of them. It evaluates whether\n    at least one of the input values is True, and if so, returns True. If all\n    input values are False, it returns False.\n\n    Args:\n        a (bool): The first boolean value.\n        b (bool): The second boolean value.\n        c (bool): The third boolean value.\n        d (bool): The fourth boolean value.\n        e (bool): The fifth boolean value.\n        f (bool): The sixth boolean value.\n        g (bool): The seventh boolean value.\n        h (bool): The eighth boolean value.\n        i (bool): The ninth boolean value.\n\n    Returns:\n        bool: The result of the logical OR operation on all input boolean values.\n    ';return a or b or c or d or e or f or g or h or i
def or_ten(a,b,c,d,e,f,g,h,i,j):'\n    Compute the logical OR operation on ten boolean values.\n\n    This function takes ten boolean input values and computes the logical OR operation\n    between all of them, returning True if at least one of the input values is True,\n    and False if all input values are False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n        d (bool): The fourth boolean input.\n        e (bool): The fifth boolean input.\n        f (bool): The sixth boolean input.\n        g (bool): The seventh boolean input.\n        h (bool): The eighth boolean input.\n        i (bool): The ninth boolean input.\n        j (bool): The tenth boolean input.\n\n    Returns:\n        bool: The result of the logical OR operation on all ten input boolean values.\n    ';return a or b or c or d or e or f or g or h or i or j
def nand(a,b):"\n    Compute the NAND (NOT-AND) logical operation on two boolean inputs.\n\n    The function takes two boolean values, 'a' and 'b', and returns the result\n    of the NAND operation between them. The NAND operation returns False only\n    when both 'a' and 'b' are True; otherwise, it returns True.\n\n    Parameters:\n    a (bool): The first boolean input.\n    b (bool): The second boolean input.\n\n    Returns:\n    bool: The result of the NAND operation between 'a' and 'b'.\n    ";return not(a and b)
def nand_three(a,b,c):'\n    Compute the 3-input NAND logical operation.\n\n    The function takes three boolean inputs (a, b, and c) and returns the result of\n    the 3-input NAND operation. In a 3-input NAND gate, the output is False if and\n    only if all three inputs (a, b, and c) are True; otherwise, the output is True.\n\n    Parameters:\n    a (bool): The first boolean input.\n    b (bool): The second boolean input.\n    c (bool): The third boolean input.\n\n    Returns:\n    bool: The result of the 3-input NAND operation.\n    ';return not(a and b and c)
def nand(*A):'\n    Calculates the result of a NAND logic function with a variable number of inputs.\n\n    This function takes a variable number of boolean inputs and calculates the result of the NAND logic operation.\n    The NAND operation returns True if at least one input is False, and False only if all inputs are True.\n\n    Args:\n        *args (bool): Input boolean values.\n\n    Returns:\n        bool: Result of the NAND logic operation performed on the input boolean values.\n\n    Example:\n        nand(True, True, True)\n        # Returns: False\n\n        nand(True, True, False)\n        # Returns: True\n    ';return not all(A)
def xor(a,b):'\n    Compute the exclusive OR (XOR) operation between two boolean values.\n\n    The XOR operation returns True if exactly one of the input booleans is True,\n    and False if both inputs are either True or False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n\n    Returns:\n        bool: The result of the XOR operation between the input booleans.\n\n    Examples:\n        >>> xor(True, False)\n        True\n        >>> xor(False, True)\n        True\n        >>> xor(True, True)\n        False\n        >>> xor(False, False)\n        False\n    ';return a^b
def xor_three(a,b,c):'\n    Perform a three-input XOR (exclusive OR) operation on the given boolean inputs.\n\n    This function takes three boolean values as input and returns the result of applying\n    the XOR operation to them. The XOR operation returns True if an odd number of inputs\n    are True, and False if an even number of inputs are True.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n\n    Returns:\n        bool: The result of the XOR operation on the three input booleans.\n    ';return a^b^c
def xor(*A):'\n    Calculates the result of an XOR logic function with a variable number of inputs.\n\n    This function takes a variable number of boolean inputs and calculates the result of the XOR logic operation.\n    The XOR (exclusive OR) operation returns True if an odd number of inputs are True, and False otherwise.\n\n    Args:\n        *args (bool): Input boolean values.\n\n    Returns:\n        bool: Result of the XOR logic operation performed on the input boolean values.\n\n    Example:\n        xor(True, False, True, False, False, True, False, True, False, True)\n        # Returns: False\n    ';return sum(A)%2==1
def xnor(a,b):"\n    Compute the logical XNOR (exclusive NOR) operation between two boolean values.\n\n    The XNOR operation returns True if both input booleans are equal, indicating\n    that they are either both True or both False. If the input booleans differ,\n    the function returns False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n\n    Returns:\n        bool: The result of the XNOR operation between input booleans 'a' and 'b'.\n    ";return not a^b
def xnor_three(a,b,c):"\n    Calculate the XNOR (exclusive NOR) of three input boolean values.\n\n    This function takes three boolean values, 'a', 'b', and 'c', and calculates\n    the XNOR operation between them. The XNOR operation returns True if all three\n    inputs are the same (either all True or all False), and False otherwise.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n\n    Returns:\n        bool: The result of the XNOR operation on the three input values.\n    ";return not a^b^c
def xnor(*A):'\n    Calculates the result of an XNOR logic function with a variable number of inputs.\n\n    This function takes a variable number of boolean inputs and calculates the result of the XNOR logic operation.\n    The XNOR (exclusive NOR) operation returns True if an even number of inputs are True, and False otherwise.\n\n    Args:\n        *args (bool): Input boolean values.\n\n    Returns:\n        bool: Result of the XNOR logic operation performed on the input boolean values.\n\n    Example:\n        xnor(True, False, True, False, False, True, False, True, False, True)\n        # Returns: True\n    ';return sum(A)%2==0
def mux(a,b,c):"\n    Multiplexer (MUX) Function:\n    \n    This function implements a 1-to-2 multiplexer (MUX) operation. It takes three boolean inputs, 'a', 'b', and 'c',\n    and returns a boolean output. The 'c' input serves as the control signal, determining whether the output should\n    be the value of 'a' (when 'c' is True) or the value of 'b' (when 'c' is False).\n    \n    Args:\n        a (bool): The first input boolean value.\n        b (bool): The second input boolean value.\n        c (bool): The control boolean value that selects between 'a' and 'b'.\n        \n    Returns:\n        bool: The selected boolean output based on the value of the control signal 'c'.\n    ";return a if c else b
from typing import List
def mux_four(a,b,c,d,sel_1,sel_0):A=[a,b,c,d];B=sel_1<<1|sel_0;return A[B]
def mux_eight(a,b,c,d,e,f,g,h,sel_2,sel_1,sel_0):A=[a,b,c,d,e,f,g,h];B=sel_2<<2|sel_1<<1|sel_0;return A[B]
def mux_any(inputs,selectors):
	B=selectors;A=inputs
	if len(A)!=2**len(B):raise ValueError('Number of inputs must be 2^n where n is the number of selectors.')
	C=0
	for(D,E)in enumerate(reversed(B)):C|=E<<D
	return A[C]
def nor(a,b,c):"\n    Computes the AND-OR-INVERT (nor) logic operation on three boolean inputs.\n\n    The nor operation evaluates to True if both 'a' and 'b' are False,\n    and returns False otherwise. The third input 'c' is not used in the computation,\n    but is provided to match the function signature for consistency.\n\n    Parameters:\n    a (bool): The first boolean input.\n    b (bool): The second boolean input.\n    c (bool): The third boolean input (not used in the computation).\n\n    Returns:\n    bool: The result of the nor logic operation, which is True if both 'a' and 'b' are False,\n          and False otherwise.\n    ";return not(a or b)
def nor_three(a,b,c):'\n    Compute the AND-OR-INVERT (nor) three-input logic operation.\n\n    This function takes three boolean inputs (a, b, and c) and returns the result of\n    the nor logic operation. nor logic computes the logical NOT of the OR operation\n    between the inputs (a, b, c). In other words, it returns True if none of the inputs\n    (a, b, c) are True; otherwise, it returns False.\n\n    Args:\n        a (bool): The first boolean input.\n        b (bool): The second boolean input.\n        c (bool): The third boolean input.\n\n    Returns:\n        bool: The result of the nor three-input logic operation.\n    ';return not(a or b or c)
def nor_any(*A):'\n    Calculates the result of an AND-OR-INVERT (nor) logic function with a variable number of inputs.\n\n    This function takes a variable number of boolean inputs and calculates the result of the nor logic operation.\n    In nor logic, multiple inputs are combined using OR gates, then the result of the OR operation is inverted,\n    and finally, the inverted result is combined with other inputs using an AND gate.\n\n    Args:\n        *args (bool): Input boolean values.\n\n    Returns:\n        bool: Result of the nor logic operation performed on the input boolean values.\n\n    Example:\n        nor(True, False, True, False, False, True, False, True, False, True)\n        # Returns: False\n    ';return not any(A)
def half_adder(a,b):'\n    Implement a half adder.\n\n    Args:\n        a (bool): First input.\n        b (bool): Second input.\n\n    Returns:\n        tuple: A tuple containing the sum (XOR of a and b) and the carry (AND of a and b).\n\n    Example:\n        >>> half_adder(False, False)\n        (False, False)\n        >>> half_adder(False, True)\n        (True, False)\n        >>> half_adder(True, False)\n        (True, False)\n        >>> half_adder(True, True)\n        (False, True)\n    ';return xor(a,b),a and b
def full_adder(a,b,cin=False):'\n    Performs a full adder operation on three input bits.\n\n    Args:\n        a (int): The first input bit (0 or 1).\n        b (int): The second input bit (0 or 1).\n        cin (int): The carry-in bit (0 or 1).\n\n    Returns:\n        tuple: A tuple containing the sum bit and the carry-out bit.\n            - sum_bit (int): The sum of the three input bits (0 or 1).\n            - carry_out (int): The carry-out bit (0 or 1).\n    ';A,B=half_adder(a,b);C,D=half_adder(A,cin);return C,B or D
def four_bit_adder(a,b,carry=False):'\n    Performs binary addition on two 4-bit numbers along with an optional carry bit.\n\n    Args:\n        a (bool): 4-bit binary number represented as a boolean list [a3, a2, a1, a0].\n        b (bool): 4-bit binary number represented as a boolean list [b3, b2, b1, b0].\n        carry (bool, optional): Optional carry-in bit for the addition. Defaults to False.\n\n    Returns:\n        tuple[list[bool, bool, bool, bool], bool]: A tuple containing:\n            - A list representing the 4-bit binary sum [sum3, sum2, sum1, sum0].\n            - A boolean representing the carry-out bit.\n    ';A=carry;A,B=full_adder(a[3],b[3],A);A,C=full_adder(a[2],b[2],A);A,D=full_adder(a[1],b[1],A);A,E=full_adder(a[0],b[0],A);return[E,D,C,B],A