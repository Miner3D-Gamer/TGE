from math import sqrt,log2
import numpy as np
def average_grade(grades):'\n    Calculate the average grade from a list of grades.\n\n    Parameters:\n    grades (list): A list of numerical grades.\n\n    Returns:\n    float: The average grade calculated by summing all grades and dividing by the number of grades.\n    ';A=grades;return sum(A)/len(A)
def median_grade(grades):'\n    Calculate the median grade from a list of grades.\n\n    Parameters:\n    grades (list): A list of numerical grades.\n\n    Returns:\n    float: The median grade from the provided list of grades.\n    ';A=grades;return sorted(A)[len(A)//2]
def mode_grade(grades):'\n    Calculate the mode (most frequent grade) from a list of grades.\n\n    Parameters:\n    grades (list): A list of numerical grades.\n\n    Returns:\n    float: The mode (most frequent grade) from the input list of grades.\n    ';A=grades;return max(set(A),key=A.count)
def standard_deviation(grades):'\n    Calculate the standard deviation of a list of grades.\n\n    Parameters:\n        grades (list): A list of numerical grades for which to calculate the standard deviation.\n\n    Returns:\n        float: The standard deviation of the grades.\n    ';A=grades;return sqrt(sum([(B-average_grade(A))**2 for B in A])/len(A))
def median(grades):'\n    Calculate the median value of a list of grades.\n\n    Parameters:\n        grades (list): A list of numeric grades.\n\n    Returns:\n        float: The median grade of the given grades.\n    ';A=grades;return sorted(A)[len(A)//2]
def median_absolute_deviation(data):'\n    Calculate the Median Absolute Deviation (MAD) of a given dataset.\n\n    The Median Absolute Deviation (MAD) is a robust measure of statistical dispersion\n    that calculates the median of the absolute deviations from the median.\n\n    Parameters:\n    data (array-like): Input data for which MAD is to be calculated.\n\n    Returns:\n    float: The Median Absolute Deviation (MAD) of the input data.\n    ';A=median(data);B=abs(data-A);C=median(B);return C
def correlation(data1,data2):'\n    Calculate the correlation coefficient between two sets of data.\n\n    Parameters:\n    data1 (array-like): The first set of data.\n    data2 (array-like): The second set of data.\n\n    Returns:\n    float: The correlation coefficient between data1 and data2.\n        The correlation coefficient ranges from -1 to 1, where:\n        - 1 indicates a perfect positive linear relationship,\n        0 indicates no linear relationship, and\n        1 indicates a perfect negative linear relationship.\n    ';return np.corrcoef(data1,data2)[0][1]
def calculate_entropy(grades):'\n    Calculate the entropy of a given list of grades.\n\n    Entropy is a measure of disorder or uncertainty in a dataset. In the context\n    of grades, higher entropy indicates a more diverse distribution of grades.\n\n    Parameters:\n    grades (list): A list of numerical values representing grades.\n\n    Returns:\n    float: The entropy of the grade distribution. The entropy is calculated using\n    the formula: entropy = -sum(p(x) * log2(p(x))) for each grade x in the list,\n    where p(x) is the proportion of occurrences of grade x in the dataset.\n    ';return sum(A*log2(A)for A in grades)
def median_absolute_error(grades):'\n    Calculate the Median Absolute Error (MedAE) for a set of grades.\n\n    The Median Absolute Error (MedAE) is a robust metric to evaluate the accuracy\n    of predictions by calculating the median of the absolute differences between each\n    grade and the median grade of the given set.\n\n    Parameters:\n    grades (list): A list of numerical grades or values.\n\n    Returns:\n    float: The Median Absolute Error (MedAE) calculated for the input grades.\n    ';A=grades;return median(abs(B-median_grade(A))for B in A)