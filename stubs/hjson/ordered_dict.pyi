from UserDict import DictMixin
from _typeshed import Incomplete
from collections.abc import Generator

def all(seq): ...

class OrderedDict(dict, DictMixin):
    def __init__(self, *args, **kwds) -> None: ...
    def clear(self) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __reversed__(self) -> Generator[Incomplete]: ...
    def popitem(self, last: bool = True): ...
    def __reduce__(self): ...
    def keys(self): ...
    setdefault: Incomplete
    update: Incomplete
    pop: Incomplete
    values: Incomplete
    items: Incomplete
    iterkeys: Incomplete
    itervalues: Incomplete
    iteritems: Incomplete
    def copy(self): ...
    @classmethod
    def fromkeys(cls, iterable, value: Incomplete | None = None): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
