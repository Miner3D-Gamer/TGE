import unittest

class ForJson:
    def for_json(self): ...

class NestedForJson:
    def for_json(self): ...

class ForJsonList:
    def for_json(self): ...

class DictForJson(dict):
    def for_json(self): ...

class ListForJson(list):
    def for_json(self): ...

class TestForJson(unittest.TestCase):
    def assertRoundTrip(self, obj, other, for_json: bool = True) -> None: ...
    def test_for_json_encodes_stand_alone_object(self) -> None: ...
    def test_for_json_encodes_object_nested_in_dict(self) -> None: ...
    def test_for_json_encodes_object_nested_in_list_within_dict(self) -> None: ...
    def test_for_json_encodes_object_nested_within_object(self) -> None: ...
    def test_for_json_encodes_list(self) -> None: ...
    def test_for_json_encodes_list_within_object(self) -> None: ...
    def test_for_json_encodes_dict_subclass(self) -> None: ...
    def test_for_json_encodes_list_subclass(self) -> None: ...
    def test_for_json_ignored_if_not_true_with_dict_subclass(self) -> None: ...
    def test_for_json_ignored_if_not_true_with_list_subclass(self) -> None: ...
    def test_raises_typeerror_if_for_json_not_true_with_object(self) -> None: ...
