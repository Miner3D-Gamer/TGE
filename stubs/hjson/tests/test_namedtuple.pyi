import unittest
from _typeshed import Incomplete
from hjson.compat import StringIO as StringIO
from typing import NamedTuple

class Value(tuple):
    def __new__(cls, *args): ...

class Point(tuple):
    def __new__(cls, *args): ...

class Value(NamedTuple):
    value: Incomplete

class Point(NamedTuple):
    x: Incomplete
    y: Incomplete

class DuckValue:
    value: Incomplete
    def __init__(self, *args) -> None: ...

class DuckPoint:
    point: Incomplete
    def __init__(self, *args) -> None: ...

class DeadDuck: ...
class DeadDict(dict): ...

CONSTRUCTORS: Incomplete

class TestNamedTuple(unittest.TestCase):
    def test_namedtuple_dumps(self) -> None: ...
    def test_namedtuple_dumps_false(self) -> None: ...
    def test_namedtuple_dump(self) -> None: ...
    def test_namedtuple_dump_false(self) -> None: ...
    def test_asdict_not_callable_dump(self) -> None: ...
    def test_asdict_not_callable_dumps(self) -> None: ...
