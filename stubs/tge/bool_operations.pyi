__all__ = ['nand', 'nand_three', 'nand_any', 'xor', 'xor_three', 'xor_any', 'xnor', 'xnor_three', 'xnor_any', 'mux_four', 'mux_eight', 'mux_any', 'nor', 'nor_three', 'nor_any', 'binary_to_gray', 'demux', 'half_adder', 'full_adder', 'four_bit_adder', 'flip_four_bits', 'two_complement', 'four_bit_subtractor', 'any_bit_adder', 'number_to_bools', 'bools_to_number']

def nand(a: bool, b: bool) -> bool: ...
def nand_three(a: bool, b: bool, c: bool) -> bool: ...
def nand_any(*args: bool) -> bool: ...
def xor(a: bool, b: bool) -> bool: ...
def xor_three(a: bool, b: bool, c: bool) -> bool: ...
def xor_any(*args: bool) -> bool: ...
def xnor(a: bool, b: bool) -> bool: ...
def xnor_three(a: bool, b: bool, c: bool) -> bool: ...
def xnor_any(*args: bool) -> bool: ...
def mux_four(a: bool, b: bool, c: bool, d: bool, sel_1: bool, sel_0: bool) -> bool: ...
def mux_eight(a: bool, b: bool, c: bool, d: bool, e: bool, f: bool, g: bool, h: bool, sel_2: bool, sel_1: bool, sel_0: bool) -> bool: ...
def mux_any(inputs: list[bool], selectors: list[bool]) -> bool: ...
def nor(a: bool, b: bool, c: bool) -> bool: ...
def nor_three(a: bool, b: bool, c: bool) -> bool: ...
def nor_any(*args: bool) -> bool: ...
def binary_to_gray(b3: bool, b2: bool, b1: bool, b0: bool) -> tuple[bool, bool, bool, bool]: ...
def demux(input: bool, *select: bool) -> list[bool]: ...
def half_adder(a: bool, b: bool) -> tuple[bool, bool]: ...
def full_adder(a: bool, b: bool, cin: bool = False) -> tuple[bool, bool]: ...
def four_bit_adder(a: tuple[bool, bool, bool, bool], b: tuple[bool, bool, bool, bool], carry: bool = False) -> tuple[bool, bool, bool, bool, bool]: ...
def flip_four_bits(b: tuple[bool, bool, bool, bool]) -> tuple[bool, bool, bool, bool]: ...
def two_complement(b: tuple[bool, bool, bool, bool]) -> tuple[bool, bool, bool, bool, bool]: ...
def four_bit_subtractor(a: tuple[bool, bool, bool, bool], b: tuple[bool, bool, bool, bool], borrow: bool = False) -> tuple[bool, bool, bool, bool, bool]: ...
def any_bit_adder(a: list[bool], b: list[bool], carry: bool = False) -> tuple[list[bool], bool]: ...
def number_to_bools(num: int) -> list[bool]: ...
def bools_to_number(bools: list[bool]) -> int: ...
