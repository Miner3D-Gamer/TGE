from collections.abc import Iterable
from types import TracebackType
from typing import Callable

__all__ = ['typing_print', 'typingInput', 'write_sentences_to_console', 'choose_from_text_menu', 'skip_line', 'print_table', 'progress_bar', 'colorize_text', 'visualize_directory', 'clear_lines', 'prompt_bool', 'prompt_number', 'matrix_rain', 'SuppressPrint', 'clear']

def clear() -> None: ...
def typing_print(text: str, delay: int | float) -> None: ...
def typingInput(text: str, delay: int | float = 0) -> str: ...
def write_sentences_to_console(text: list[str], type_delay: int | float, line_delay: int | float = 0.7) -> None: ...
def choose_from_text_menu(menu_list: Iterable[str], prompt: str = '', destroy: bool = False) -> int: ...
def skip_line() -> None: ...
def print_table(data: list[list[str]]) -> str: ...
def progress_bar(progress_name: str, current: int, total: int, length: int, show_float: bool = True, empty_tile: str = '-', full_tile: str = '#') -> None: ...
def colorize_text(text: str, color: str) -> str: ...
def visualize_directory(path: str, prefix: str = '', lines: list[str] | None = None) -> list[str]: ...
def clear_lines(num_lines: int, move_front: bool = False) -> None: ...
def prompt_bool(question: str, allow_undeterminable: bool = False, tries: int = 0, delete_lines: bool = True) -> tuple[bool | None, str]: ...
def prompt_number(question: str, min: int | None = None, max: int | None = None, delete_lines: bool = True, tries: int = 0) -> int | None: ...
def matrix_rain(rows: int, columns: int, speed: int | float = 0.1, density: int | float = 0.2, duration: int | float | None = None, symbols: list[str] = ['0', '1'], callable_stop_if_return_true: Callable[..., bool] = ...) -> None: ...

class SuppressPrint:
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Exception | None, exc_value: Exception | None, traceback: TracebackType | None) -> None: ...
