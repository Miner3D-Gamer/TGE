import uuid
from typing import Any

__all__ = ['make_legal_filename', 'create_missing_directory', 'delete_directory', 'move_file', 'copy_file', 'rename_file', 'copy_directory', 'move_directory', 'rename_directory', 'get_folder_name', 'does_file_exist', 'does_directory_exist', 'delete_file', 'compare_file', 'are_directories_the_same', 'count_files_in_directory', 'count_items_in_directory', 'get_current_working_directory', 'get_file_extension', 'find_files_by_extension', 'get_file_size', 'get_file_creation_time', 'count_functions_in_file', 'count_functions_in_directory', 'count_function_names_in_directory', 'save_counted_function_names_from_directory', 'input_file_path', 'ask_for_directory_path', 'unzip_file', 'zip_directory', 'get_appdata_path', 'get_latest_file_in_directory_from_all_filenames_that_are_real_numbers', 'is_directory_empty', 'get_filesize', 'get_file_size_of_directory', 'generate_uuid_from_directory', 'find_files_with_extension', 'find_files_with_extensions', 'decompress_file_paths', 'compress_file_paths', 'object_to_optimal_string']

def make_legal_filename(filename: str, replacer: str = '_') -> str: ...
def create_missing_directory(directory: str) -> bool: ...
def delete_directory(directory: str) -> tuple[bool, str]: ...
def move_file(source_path: str, destination_path: str) -> None: ...
def copy_file(source_path: str, destination_path: str) -> None: ...
def rename_file(source_path: str, name: str) -> None: ...
def copy_directory(source_path: str, destination_path: str) -> None: ...
def move_directory(source_path: str, destination_path: str) -> None: ...
def rename_directory(source_path: str, name: str) -> None: ...
def get_folder_name(path: str) -> str: ...
def does_file_exist(directory: str) -> bool: ...
def does_directory_exist(directory: str) -> bool: ...
def delete_file(directory: str) -> None: ...
def compare_file(directory1: str, directory2: str) -> bool: ...
def are_directories_the_same(directory1: str, directory2: str, dir1_blacklist: list[str] = [], dir2_blacklist: list[str] = []) -> bool: ...
def count_files_in_directory(directory_path: str, extension_backlist: list[str] = []) -> int: ...
def count_items_in_directory(directory_path: str) -> int: ...
def get_current_working_directory() -> str: ...
def get_file_extension(file_path: str) -> str: ...
def find_files_by_extension(directory_path: str, extension: str) -> list[str]: ...
def get_file_size(file_path: str) -> int: ...
def get_file_creation_time(file_path: str) -> float: ...
def count_functions_in_file(file_path: str) -> tuple[int, list[str]]: ...
def count_functions_in_directory(directory_path: str) -> tuple[int, dict[str, tuple[int, list[str]]], list[str]]: ...
def count_function_names_in_directory(directory_path: str) -> tuple[int, list[str]]: ...
def save_counted_function_names_from_directory(directory_path: str, file_name: str, output_path: str, create_missing_directory_bool: bool) -> bool: ...
def input_file_path(extension: str | None = None) -> str: ...
def ask_for_directory_path() -> str: ...
def unzip_file(zip_path: str, extract_dir: str, create_missing_directory_bool: bool = False) -> tuple[bool, bool]: ...
def zip_directory(directory_path: str, output_path: str, create_missing_directory_bool: bool = False) -> tuple[bool, bool]: ...
def get_appdata_path() -> str: ...
def get_latest_file_in_directory_from_all_filenames_that_are_real_numbers(path: str) -> str | None: ...
def is_directory_empty(directory_path: str) -> bool: ...
def get_filesize(file_path: str) -> int: ...
def get_file_size_of_directory(directory: str, blacklisted_file_extensions: list[str] = [], chunk_size: int = 4096) -> int: ...
def generate_uuid_from_directory(directory: str, blacklisted_extensions: list[str] = []) -> uuid.UUID: ...
def find_files_with_extension(root_dir: str, file_extension: str) -> list[str]: ...
def find_files_with_extensions(root_dir: str, file_extensions: list[str]) -> list[str]: ...
def decompress_file_paths(data: NestedList | dict[str, Any]) -> list[str] | dict[str, Any]: ...
def compress_file_paths(paths: list[str]) -> NestedList | dict[str, Any]: ...
def object_to_optimal_string(data: Any) -> str: ...
