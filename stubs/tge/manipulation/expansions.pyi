__all__ = ['ExpandedString']

class ExpandedString(str):
    def __new__(cls, value: str): ...
    def __init__(self, value: str) -> None: ...
    def get_scrambled(self) -> str: ...
    def scramble(self) -> None: ...
    def chop(self, substring: str) -> None: ...
    def get_chopped(self, substring: str) -> str: ...
    def get_truncated(self, length: int) -> str: ...
    def truncate(self, length: int) -> None: ...
    def reverse(self) -> None: ...
    def get_reversed(self) -> str: ...
    def check_anagram(self, word2: str) -> bool: ...
    def remove_duplicate_characters(self) -> None: ...
    def get_string_after_removing_duplicate_characters(self) -> str: ...
    def find_longest_word(self) -> str: ...
    def get_length_of_longest_substring_without_repeating_characters(self) -> int: ...
    def find_first_non_repeating_character(self) -> str | None: ...
    def count_consonants(self) -> int: ...
    def count_substring_occurrences(self, substring: str) -> int: ...
    def count_vowels(self) -> int: ...
    def find_longest_substring(self) -> str: ...
    def check_pangram(self) -> bool: ...
    def find_common_characters(self, string2: str) -> str: ...
    def get_chunks(self, chunk_size: int): ...
    def lchop(self, substring: str) -> None: ...
    def get_lchop(self, substring: str) -> str: ...
    def rchop(self, substring: str) -> None: ...
    def get_rchop(self, substring: str) -> str: ...
    def left_pad(self, length: int, char: str = ' ') -> None: ...
    def get_left_pad(self, length: int, char: str = ' ') -> str: ...
    def right_pad(self, length: int, char: str = ' ') -> None: ...
    def get_right_pad(self, length: int, char: str = ' '): ...
    def left_replace(self, chars: list[str], replacement: str) -> None: ...
    def get_left_replace(self, chars: list[str], replacement: str) -> str: ...
    def get_right_replace(self, chars: list[str], replacement: str): ...
    def right_replace(self, chars: list[str], replacement: str) -> str: ...
    def remove_html_tags(self) -> str: ...
    def get_with_html_tags_removed(self) -> str: ...
    def replace_with_list_as_replacement(self, replacer: str, replacements: list[str]) -> None: ...
    def replace_with_list_as_replacer(self, replacers: list[str], replacement: str) -> None: ...
    def get_replace_with_list_as_replacement(self, replacer: str, replacements: list[str]) -> str: ...
    def get_replace_with_list_as_replacer(self, replacers: list[str], replacement: str) -> str: ...
